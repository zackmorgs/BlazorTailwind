@implements IDisposable

@inject NavigationManager NavigationManager

<nav class="fixed">
    <NavLink href="" Match="NavLinkMatch.All">
        Home
    </NavLink>

    <NavLink href="counter">
        Counter
    </NavLink>

    <NavLink href="weather">
        Weather
    </NavLink>

    <NavLink href="auth">
        Auth Required
    </NavLink>

    <AuthorizeView>
        <Authorized>
            <div class="nav-item px-3">
                <NavLink href="Account/Manage">
                    @context.User.Identity?.Name
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit">
                        Logout
                    </button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item px-3">
                <NavLink href="Account/Register">
                    <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink href="Account/Login">
                    <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</nav>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
