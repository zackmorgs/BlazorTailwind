@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorTailwind.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<header class="hero">.
    <PageTitle>Log in</PageTitle>
    <h1 class="text-3xl font-semibold mb-4">Log in</h1>
    <p class="text-lg">Log in below.</p>
</header>

<div class="flex flex-col items-center justify-center">
    <section class="w-full max-w-md bg-white p-4 rounded-lg shadow-md">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2 class="text-xl font-medium mb-4">Use a local account to log in.</h2>
            <hr class="mb-4" />
            <ValidationSummary class="text-red-500" role="alert" />

            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <InputText @bind-Value="Input.Email"
                    class="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-red-500 mt-1" />
            </div>

            <div class="mb-4">
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <InputText type="password" @bind-Value="Input.Password"
                    class="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    autocomplete="current-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-red-500 mt-1" />
            </div>

            <div class="mb-4 flex items-center">
                <InputCheckbox @bind-Value="Input.RememberMe"
                    class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                <label class="ml-2 block text-sm text-gray-900">Remember me</label>
            </div>

            <div class="mb-4">
                <button type="submit"
                    class="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 focus:ring-4 focus:ring-blue-300">Log
                    in</button>
            </div>

            <div class="text-sm text-center">
                <p>
                    <a href="Account/ForgotPassword" class="text-blue-500 hover:underline">Forgot your password?</a>
                </p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                        class="text-blue-500 hover:underline">Register as a new user</a>
                </p>
                <p>
                    <a href="Account/ResendEmailConfirmation" class="text-blue-500 hover:underline">Resend email
                        confirmation</a>
                </p>
            </div>
        </EditForm>
    </section>

    <section class="w-full max-w-md mt-6 bg-white p-8 rounded-lg shadow-md">
        <h3 class="text-xl font-medium mb-4">Use another service to log in.</h3>
        <hr class="mb-4" />
        <ExternalLoginPicker />
    </section>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
